export const meetingMyContributionText = [
  {
    id: 0,
    skill: "FrontEnd & BackEnd",
    pageTitle: "메인페이지",
    details: [
      {
        title: "사용자 그룹 목록 조회 기능",
        description:
          "미팅을 원하는 사용자에게 매칭된 그룹이 아닌 새로운 미팅 그룹만 보여주도록 설계했습니다. 이를 위해, 호스트 그룹 사용자가 본인의 그룹을 제외한 미팅 그룹 목록을 조회할 수 있게 하였고, 사용자가 참여하지 않은 그룹만 조회되도록 매칭 완료된 그룹을 리스트에서 제거하는 로직을 적용했습니다. 이를 통해 불필요한 정보가 노출되지 않아 조회 속도를 최적화할 수 있었습니다.",
      },
      {
        title: "조건에 따른 필터링 기능",
        description:
          "성별, 지역, 인원수에 따라 조건에 맞는 그룹만 조회할 수 있도록 BooleanExpression을 활용한 필터링 기능을 구현했습니다. 필터 상태는 useSearchParams 훅을 통해 관리되며, 사용자가 조건을 변경할 때마다 동적으로 URL을 생성하여 서버에 요청하도록 설계하였습니다. 이로 인해, 사용자는 실시간으로 원하는 조건에 맞는 그룹을 손쉽게 찾을 수 있어 만족도가 크게 향상되었습니다.",
      },
      {
        title: "무한 스크롤 기능",
        description:
          "Pageable과 PageImpl을 활용해 페이징 처리를 구현하고, useInView 훅을 이용하여 스크롤이 특정 지점에 도달할 때 다음 페이지의 데이터를 요청하는 로직을 설계했습니다. 페이지 이동 없이 스크롤만으로 그룹 목록을 확인할 수 있어 사용자 인터랙션이 자연스러워졌고, 데이터 로딩을 점진적으로 진행함으로써 성능 또한 크게 개선되었습니다.",
      },
    ],
  },
  {
    id: 1,
    skill: "FrontEnd & BackEnd",
    pageTitle: "익명게시판",
    details: [
      {
        title: "댓글 조회, 등록 및 본인 글만 삭제",
        description:
          "익명 게시판에서 댓글 목록 조회, 댓글 작성, 그리고 본인이 작성한 댓글만 삭제할 수 있는 RESTful API를 설계하고 구현했습니다. Page 인터페이스를 활용하여 페이징된 댓글 데이터를 반환하도록 설정하였고, React의 useState와 useEffect 훅을 통해 댓글 작성과 삭제, 무한 스크롤 로직을 처리했습니다. 또한, useInView 훅을 이용해 스크롤이 특정 지점에 도달할 때마다 자동으로 다음 댓글 페이지를 불러오는 무한 스크롤 기능을 구현했습니다. 댓글 작성 시에는 작성된 댓글이 실시간으로 목록 상단에 추가되어 즉각적인 피드백을 제공함으로써 사용자 경험을 개선하였으며, 본인의 댓글만 삭제 가능하도록 하여 안전성을 높였습니다. 삭제 시에는 확인창을 표시해 사용자 친화적인 UI도 제공하였습니다.",
      },
    ],
  },
  {
    id: 2,
    skill: "FrontEnd",
    pageTitle: "그 외",
    details: [
      {
        title: "페이지 생성",
        description:
          "게시글 작성 페이지, 내가 속한 그룹 페이지, 내가 속한 채팅 페이지를 추가로 구현하여 사용자가 필요한 정보에 빠르게 접근할 수 있도록 했습니다.",
      },
      {
        title: "공통 컴포넌트",
        description:
          "입력 필드(Input)와 그룹이 없을 경우 안내하는 메시지를 재사용 가능한 공통 컴포넌트로 제작하여 개발 효율성을 높이고 유지보수를 쉽게 하였습니다. 이로 인해 스타일과 기능이 일관되게 적용되어 사용자 경험 또한 개선되었습니다.",
      },
    ],
  },
];

export const pageMyContributionText = [
  {
    id: 0,
    skill: "FrontEnd & BackEnd",
    pageTitle: "로그인",
    details: [
      {
        title: "로그인 & 자동 로그인",
        description:
          "사용자가 계정 정보를 통해 로그인할 수 있도록 기능을 구현하고, 로그인 이후에는 Spring Security를 사용하여 인증 정보를 안전하게 관리하였습니다. 사용자의 권한 인증 후 해당 정보를 로그에 기록하여 관리할 수 있도록 설정하였고, 사용자가 자동 로그인 옵션을 선택할 경우 세션 ID와 쿠키를 활용하여 자동 로그인 상태가 유지되도록 했습니다. 또한, 로그아웃 시 세션과 쿠키를 삭제하여 자동 로그인 상태를 해제하는 기능을 추가하여 보안성을 강화하였으며, 이를 통해 사용자 편의성을 높이고 안정적인 로그인 유지가 가능하게 구현하였습니다.",
      },
      {
        title: "아이디 찾기 및 비밀번호 변경 기능",
        description:
          "사용자가 등록한 이메일과 이름을 통해 아이디를 찾을 수 있는 기능을 구현하였고, 비밀번호 변경 페이지를 통해 안전하게 비밀번호를 수정할 수 있도록 했습니다.",
      },
    ],
  },
  {
    id: 1,
    skill: "FrontEnd & BackEnd",
    pageTitle: "주문 결제",
    details: [
      {
        title: "결제 및 포인트 사용 기능 구현",
        description:
          "사용자가 결제 시 포인트를 사용할 수 있도록 기능을 구현하였으며, 결제할 금액을 직접 입력할 수 있도록 했습니다. 또한, 포인트가 부족하거나 초과되는 경우 오류 메시지를 제공하여 즉각적인 피드백을 받을 수 있도록 설정했습니다.",
      },
      {
        title: "입력값 검증 및 오류 처리 기능 구현",
        description:
          "결제 시 사용되는 입력값(포인트, 전화번호 등)을 실시간으로 검증하는 로직을 추가하여, 잘못된 입력값이 감지되면 경고 메시지를 표시하도록 구현했습니다. 패턴 검증을 통해 사용자 입력을 관리하고, 필수 항목이 빠짐없이 입력되도록 유도하여 정확성을 높였습니다.",
      },
      {
        title: "무결성 체크 및 포인트 결제 확인 기능 구현",
        description:
          "서버와 비동기 통신을 통해 포인트 확인 및 결제 절차를 원활하게 처리할 수 있도록 하였습니다. 결제 시 사용자의 보유 포인트와 결제 금액을 비교하는 무결성 체크 기능을 구현하여, 결제가 정확하고 안전하게 진행될 수 있도록 했습니다.",
      },
    ],
  },
  {
    id: 2,
    skill: "FrontEnd",
    pageTitle: "그 외",
    details: [
      {
        title: "전체적인 디자인 방향성 제시",
        description:
          "프로젝트의 전반적인 UI/UX 디자인 방향성을 Figma를 사용해 제시하여 일관된 사용자 경험을 제공할 수 있도록 하였습니다.",
      },
      {
        title: "마크업 및 CSS 추가 작업",
        description:
          "채팅창, Shop 메인, Shop 상세페이지, 장바구니, 회원가입 페이지의 마크업과 CSS 추가 작업을 진행하여 각 페이지가 디자인 가이드에 맞춰 구현되도록 하였습니다.",
      },
    ],
  },
];
